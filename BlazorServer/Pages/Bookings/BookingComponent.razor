@inject IBookingService _BookingService
@inject NavigationManager _navigationManager
@inject IJSRuntime _js


<a @onclick="@(()=>ToDetails(@Booking.BookingId))">
    <div class="booking">
        <img src=@path>

        <div class="info">
            <p>@Booking.Room.RoomName</p>
            <p>@Booking.User.Name </p>
            <p>
                @Booking.StartTime.ToString("dd.MM.yyy") - @Booking.EndTime.ToString("dd.MM.yyy")
            </p>
        </div>

        <div class="edit-delete">
            <a @onclick="@(()=>Update(@Booking.BookingId))" class="edit">Edit</a>
            <a @onclick:stopPropagation @onclick="@(()=>Delete(@Booking.BookingId))" class="edit">Delete</a>
        </div>

    </div>
</a>

@code {
    [Parameter]
    public BookingDto Booking { get; set; }

    [Parameter]
    public EventCallback<int> OnBookingDeleted { get; set; }

    private string path;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Initialize photo path here
        string[] files = Directory.GetFiles("wwwroot/images/photos");
        int count = files.Count();
        var random = new Random();
        var photoID = random.Next(1, count);
        path = files[photoID][7..];
    }

    protected async Task Delete(int id)
    {
        var confirm = await _js.InvokeAsync<bool>("confirm", "Are You Sure You Want To Delete this Booking?");
        if (confirm)
        {
            _BookingService.Delete(Booking.BookingId);
            await OnBookingDeleted.InvokeAsync(id); // Notify parent component
        }
    }

    protected void Update(int id)
    {
        _navigationManager.NavigateTo($"Booking/edit/{id}");
    }

    protected void ToDetails(int id)
    {
        _navigationManager.NavigateTo($"Booking/{id}");
    }
}